@page "/profiles"
@using IMSClassLibrary.Models;
@using IMSClassLibrary.Repos;
@inject UserRepository userRepository
@inject NotificationService NotificationService
@inject ProfileRepository profileRepository
@inject ModuleRepository moduleRepository
@inject Authorisation authorisation
@inject NavigationManager UriHelper
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime js

<PageTitle>Profiles</PageTitle>


<div class="page-body-wrapper">
<div class="page-body">
 <div class="container-fluid">
<div class="page-breadcrumb d-none d-sm-flex align-items-center mb-3">
	<div class="breadcrumb-title pe-3">@parentPage.Name</div>
	<div class="ps-3">
		<nav aria-label="breadcrumb">
			<ol class="breadcrumb mb-0 p-0">
				<li class="breadcrumb-item">
					<a href="javascript:;"><i class="bx bx-home-alt"></i></a>
				</li>
				<li class="breadcrumb-item active" aria-current="page">@thisPage.Name</li>
			</ol>
		</nav>
	</div>
	<div class="ms-auto">
		<div class="btn-group">
	
			<button class="btn btn-success btn-lg" type="button" @onclick="@(()=>openModal("addProfileModal"))" data-bs-toggle="tooltip" title="btn btn-success btn-lg">Add Profile </button>
		</div>
	</div>
</div>



<div class="col-sm-12">
	<div class="card">
		<div class="card-header">
			<h4>Basic Table With Border Bottom Color</h4><span>Use a class<code>table</code> to any table, and <code>.border-bottom-*</code>class for Border bottom color</span>
		</div>
		<div class="table-responsive custom-scrollbar">
			<table class="table">
				<thead>
					<tr class="border-bottom-primary">
						<th>#</th>
						<th>Name</th>
						<th>Actions</th>
					</tr>
				</thead>
				<tbody>
					@{var count = 1;}
					@foreach(var pro in profiles)
					{
						<tr>
							<td>@count</td>
							<td>@pro.Name</td>
							<td>
								
									<button type="button" title="Edit Profile"  @onclick="@(()=>editProfile(pro))" class="btn btn-outline-primary">
										<i class="bx bx-edit me-0"></i>
									</button>

									<button type="button" title="Delete Profile"   @onclick="@(()=>deleteProfile(pro))" class="btn btn-outline-danger">
										<i class="bx bx-trash me-0"></i>
									</button>
								

							</td>
						</tr>
						count++;
					}
					
				</tbody>
				<tfoot>
					
				</tfoot>
			</table>
		</div>
	</div>
</div>


<div class="modal fade" id="deleteProfileModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLongTitle">Delete</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			
			<div class="modal-body">
				<label>Are you sure you want to delete this profile?</label>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="lni lni-close"></i> Close</button>
				<button @onclick="completeDelete" type="button" class="btn btn-danger"><i class="lni lni-trash"></i> Delete</button>
			</div>
		</div>
	</div>
</div>




<div class="modal fade" id="addProfileModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">@modalTitle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
			<EditForm Model="profile" OnValidSubmit="saveProfile">
            <div class="modal-body">
				<DataAnnotationsValidator/>
				<ValidationSummary/>

				<label>Profile Name</label>
				<InputText class="form-control" @bind-Value="profile.Name"></InputText>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="lni lni-close"></i> Close</button>
                    <button type="submit" class="btn btn-primary"><i class="lni lni-save"></i> Save</button>
            </div>
			</EditForm>
        </div>
    </div>
</div>

		</div>
	</div>
</div>







@code {
	Profile profile =  new Profile();
	List<Profile> profiles = new List<Profile>();
	bool isEditing = false;
	public string title = "Profiles";
	private string modalTitle = "Add Profile";
	string loggedInEmail;
	string pageUrl = "profiles";
	Module parentPage = new Module();
	Module thisPage = new Module();

	protected override void OnInitialized()
	{
		base.OnInitialized();
		resetModel();
		string Remail = httpContextAccessor.HttpContext.Session.GetString("email");
		var result = userRepository.Get(Remail);

		if (result.IsSuccessful)
		{
			httpContextAccessor.HttpContext.Session.SetString("email", result.Data.Email);
			loggedInEmail = result.Data.Email;
			thisPage = moduleRepository.Get(pageUrl).Data;
			parentPage = moduleRepository.Get(thisPage.ParentId).Data;

			  if (!authorisation.authorize(result.Data.Id, pageUrl))
            {
                UriHelper.NavigateTo("/");
            }
		}
		else
		{

		}
	}

	private void saveProfile()
	{
		ResultObject<Profile> resultObject = null;
		resultObject =  isEditing ? profileRepository.Update(profile) : profileRepository.Add(profile);
		if (resultObject.IsSuccessful)
		{
			NotificationService.ShowSuccess(resultObject.Message);
		}
		else
		{
			NotificationService.ShowError(resultObject.Message);
		}
		closeModal("addProfileModal");
		resetModel();

	}

	private async Task deleteProfile(Profile pro)
	{
		this.profile = pro;
		await openModal("deleteProfileModal");
	}

	void resetModel()
	{
		modalTitle = "Add Profile";
		profiles = profileRepository.GetAll().Data;
		profile = new IMSClassLibrary.Models.Profile()
			{
				CreatedBy = loggedInEmail,
				ModifiedBy = " ",
				Status = "active"
			};
		//initializeDataTable("profileTable");
	}

	private void completeDelete()
	{
		
		var resultObject = profileRepository.DeleteById(this.profile.Id);
		if (resultObject.IsSuccessful)
		{
			closeModal("deleteProfileModal");
			NotificationService.ShowSuccess(resultObject.Message);
		}
		else
		{
			NotificationService.ShowError(resultObject.Message);
		}
		resetModel();
	}

	private async Task editProfile(Profile pro)
	{
		isEditing = true;
		this.profile = pro;
		modalTitle = "Edit Profile";
		await openModal("addProfileModal");

	}

	protected async Task initializeDataTable(string tableId)
	{
		await js.InvokeVoidAsync("initializeDataTable", tableId);
	
	}
	
	protected async Task initializeAppUi(string empty="")
	{
		await js.InvokeVoidAsync("initializeAppUi", empty);
	
	}

	protected async Task openModal(string modalId)
    {
		await js.InvokeVoidAsync("openModal", modalId);
		
    }

	protected async Task closeModal(string modalId)
	{
		await js.InvokeVoidAsync("closeModal", modalId);
	}
}
