@page "/users"
@using IMSClassLibrary.Models;
@using IMSClassLibrary.Repos;
@inject ModuleRepository moduleRepository
@inject NotificationService NotificationService;
@inject UserRepository userRepository
@inject DepartmentRepository departmentRepository
@inject ModuleRepository moduleRepository
@inject Authorisation authorisation
@inject NavigationManager UriHelper
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime js

<PageTitle>Users</PageTitle>
<!--breadcrumb-->
<div class="page-body-wrapper">
 <div class="page-body">
  <div class="container-fluid">
   <div class="page-breadcrumb d-none d-sm-flex align-items-center mb-3">
    <div class="breadcrumb-title pe-3">@parentPage.Name</div>
    <div class="ps-3">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb mb-0 p-0">
                <li class="breadcrumb-item">
                    <a href="javascript:;"><i class="bx bx-home-alt"></i></a>
                </li>
                <li class="breadcrumb-item active" aria-current="page">@thisPage.Name</li>
            </ol>
        </nav>
    </div>
    <div class="ms-auto">
        <div class="btn-group">
    
            <button class="btn btn-success btn-lg" type="button" @onclick="@(()=>openModal("addMenuModal"))" data-bs-toggle="tooltip" title="btn btn-success btn-lg">Add User</button>
           
        </div>
    </div>
</div>
<!--end breadcrumb-->




<div class="col-sm-12">
    <div class="card">
        <div class="card-header">
            <h4>Basic Table With Border Bottom Color</h4><span>Use a class<code>table</code> to any table, and <code>.border-bottom-*</code>class for Border bottom color</span>
        </div>
        <div class="table-responsive custom-scrollbar">
            <table class="table">
                <thead>
                    <tr class="border-bottom-primary">
                        <th scope="col">#</th>
                        <th scope="col">First Name</th>
                        <th scope="col">Last Name</th>
                        <th scope="col">NRC</th>
                        <th scope="col">Email</th>
                        <th scope="col">Department</th>
                        <th scope="col">Status</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int count = 1;
                    }
                    @foreach (var usr in users)
                    {
                        <tr>
                            <td>@count</td>
                            <td>@usr.FirstName</td>
                            <td>@usr.LastName</td>
                            <td>@usr.Nrc</td>
                            <td>@usr.Email </td>
                            <td>@usr.Department.Name</td>
                            <td>@usr.Status </td>
                            <td>
                                <button title="Edit" type="button" @onclick="@(()=>editMenu(usr))" class="btn btn-outline-primary">
                                    <i class="bx bx-edit me-0"></i>
                                </button>
                                <button title="Delete" type="button" @onclick="@(()=>deleteMenu(usr))" class="btn btn-outline-danger">
                                    <i class="bx bx-trash me-0"></i>
                                </button>
                            </td>
                        </tr>
                        count++;
                    }
                </tbody>

            </table>
        </div>
    </div>
</div>


<div class="modal fade" id="deleteMenuModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle"> <i class="lni lni-trash"></i> Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                <label>Are you sure you want to delete this user?</label>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="lni lni-close"></i> Close</button>
                <button @onclick="completeDelete" type="button" class="btn btn-danger"><i class="lni lni-trash"></i> Delete</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="addMenuModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">@modalTitle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
                 <EditForm Model="@user" OnValidSubmit="saveModule">
                    <div class="modal-body">
                         <DataAnnotationsValidator/>
                            <ValidationSummary/>

                         <div class="form-group">
                        <label>First Name</label>
                        <InputText @bind-Value="user.FirstName" class="form-control" placeholder="Enter First Name here" />
                        </div>

                         <div class="form-group">
                        <label>Last Name</label>
                        <InputText @bind-Value="user.LastName" class="form-control" placeholder="Enter Last name here" />
                         </div>

                        <div class="form-group">
                        <label>Nrc</label>
                        <InputText @bind-Value="user.Nrc" class="form-control" placeholder="Enter NRC Number here" />
                         </div>

                         <div class="form-group">
                        <label>Email</label>
                        <InputText type="email" @bind-Value="user.Email" class="form-control" placeholder="Enter Email here" />
                         </div>
                    <div class="form-group">
                        <label>Departments</label>
                        <InputSelect @bind-Value="user.DepartmentId" class="form-control">
                            <option value="0">--Select Department--</option>
                            @foreach (var dep in departments)
                            {
                                <option value="@dep.Id">@dep.Name</option>
                            }
                        </InputSelect>
                    </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"> <i class="lni lni-close"></i>Close</button>
                        <button type="submit" class="btn btn-success"><i class="lni lni-save"></i>Save</button>
                    </div>
                 </EditForm>

        </div>
    </div>
</div>
        </div>
    </div>
</div>



@code 
{
    string loggedInEmail;
    string pageUrl = "users";
    Module parentPage = new Module();
    Module thisPage = new Module();
    string modalTitle = "Add User";
    bool isEditing = false;
    User user = new IMSClassLibrary.Models.User()
    {
        CreatedBy = " ",
        ModifiedBy = " ",
        Status = "active",
        Password="password"

    };
    List<IMSClassLibrary.Models.User> users = new List<User>();
    List<Department> departments = new List<Department>();


    protected override void OnInitialized()
    {
        base.OnInitialized();
        users = userRepository.GetAll().Data;
        this.user.CreatedBy = loggedInEmail;
        resetModel();

        string Remail = httpContextAccessor.HttpContext.Session.GetString("email");
        var result = userRepository.Get(Remail);

        if (result.IsSuccessful)
        {
            httpContextAccessor.HttpContext.Session.SetString("email", result.Data.Email);
            loggedInEmail = result.Data.Email;
            thisPage = moduleRepository.Get(pageUrl).Data;
            parentPage = moduleRepository.Get(thisPage.ParentId).Data;

            if (!authorisation.authorize(result.Data.Id, pageUrl))
            {
                UriHelper.NavigateTo("/");
            }
        }
        else
        {

        }
    }

    void saveModule()
    {
        if (!isEditing)
        { 
            this.user.CreatedDate = DateTime.Now;
            this.user.CreatedBy = loggedInEmail;
            var resultObject = userRepository.Add(this.user);

            if (resultObject.IsSuccessful)
            {
                NotificationService.ShowSuccess(resultObject.Message);
            }
            else
            {

                NotificationService.ShowError(resultObject.Message);
            }
        }
        else
        {
            this.user.ModifiedDate = DateTime.Now;
            this.user.ModifiedBy = loggedInEmail;
            var resultObject = userRepository.Update(this.user);
            if (resultObject.IsSuccessful)
            {
                NotificationService.ShowSuccess(resultObject.Message);
            }
            else
            {
                NotificationService.ShowError(resultObject.Message);
            }
        }
        closeModal("addMenuModal");
        resetModel();
    }

    private void editMenu(User mn)
    {
        isEditing = true;
        this.modalTitle = "Edit User";
        this.user = mn;
        openModal("addMenuModal");
    }

    void deleteMenu(User mn)
    {
        this.user = mn;
        openModal("deleteMenuModal");
    }

    void completeDelete()
    {
        var resultObject = (userRepository.DeleteById(user.Id));
        if (resultObject.IsSuccessful)
        {
            resetModel();
            closeModal("deleteMenuModal");
            NotificationService.ShowSuccess(resultObject.Message);
        }
        else
        {
            NotificationService.ShowError(resultObject.Message);

        }
    }

    void resetModel()
    {
        departments = departmentRepository.GetAll().Data;
        this.users = userRepository.GetAll().Data;
        this.modalTitle = "Add User";
        this.user = new User()
            {
                CreatedBy =  loggedInEmail,
                ModifiedBy = " ",
                Status = "active",
                Password = "password"
            };
    }
   
    private async Task ShowNotification(string type, string message)
    {
        await js.InvokeVoidAsync(type + "_noti", message);
    }

    protected async Task openModal(string modalId)
    {
        await js.InvokeVoidAsync("openModal", modalId);
    }

    protected async Task closeModal(string modalId)
    {
        await js.InvokeVoidAsync("closeModal", modalId);
    }
}