@page "/userProfiles"
@using IMSClassLibrary.Models;
@using IMSClassLibrary.Repos;
@inject ModuleRepository moduleRepository
@inject NotificationService NotificationService;
@inject UserRepository userRepository
@inject UserProfileRepository userProfileRepository
@inject ProfileRepository profileRepository
@inject IHttpContextAccessor httpContextAccessor
@inject ModuleRepository moduleRepository
@inject Authorisation authorisation
@inject NavigationManager UriHelper
@inject IJSRuntime js

<PageTitle>User Profiles</PageTitle>
<!--breadcrumb-->
<div class="page-body-wrapper">
<div class="page-body">
 <div class="container-fluid">
<div class="page-breadcrumb d-none d-sm-flex align-items-center mb-3">
    <div class="breadcrumb-title pe-3">@parentPage.Name</div>
    <div class="ps-3">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb mb-0 p-0">
                <li class="breadcrumb-item">
                    <a href="javascript:;"><i class="bx bx-home-alt"></i></a>
                </li>
                <li class="breadcrumb-item active" aria-current="page">@thisPage.Name</li>
            </ol>
        </nav>
    </div>
    <div class="ms-auto">
        <div class="btn-group">
            <button class="btn btn-success btn-lg" type="button" @onclick="@(()=>openModal("addMenuModal"))" data-bs-toggle="tooltip" title="btn btn-success btn-lg">Add User Profile</button>

        </div>
    </div>
</div>
<!--end breadcrumb-->



<div class="col-sm-12">
    <div class="card">
        <div class="card-header">
            <h4>User Profiles</h4><span>Use a class<code>table</code> to any table, and <code>.border-bottom-*</code>class for Border bottom color</span>
        </div>
        <div class="table-responsive custom-scrollbar">
            <table class="table">
                <thead>
                    <tr class="border-bottom-primary">
                        <th>#</th>
                        <th>User Name</th>
                        <th>Profile Name</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int count = 1;
                    }
                    @foreach (var up in uProfile)
                    {
                        <tr>
                            <td>@count</td>
                            <td> @up.User.FirstName @up.User.LastName <br /><small><small>@up.User.Email</small></small></td>
                            <td> @up.Profile.Name </td>
                            <td> @up.Status </td>
                            <td>
                                <button type="button" @onclick="@(()=>editUserProfile(up))" class="btn btn-outline-primary">
                                    <i class="bx bx-edit me-0"></i>
                                </button>
                                <button type="button" @onclick="@(()=>deleteUserProfile(up))" class="btn btn-outline-danger">
                                    <i class="bx bx-trash me-0"></i>
                                </button>
                            </td>
                        </tr>
                        count++;
                    }
                </tbody>

            </table>
        </div>
    </div>
</div>
        </div>
    </div>
</div>




<div class="modal fade" id="deleteMenuModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle"> <i class="lni lni-trash"></i> Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                <label>Are you sure you want to delete this user profile?</label>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="lni lni-close"></i> Close</button>
                <button @onclick="completeDelete" type="button" class="btn btn-danger"><i class="lni lni-trash"></i> Delete</button>
            </div>
        </div>
    </div>
</div>



<div class="modal fade" id="addMenuModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">@modalTitle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <EditForm Model="@userProfile" OnValidSubmit="saveModule">
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label>User Name</label>
                        <InputSelect @bind-Value="userProfile.UserId" class="form-control">
                            <option value="0">Select User</option>
                            @foreach (var usr in users)
                            {
                                <option value="@usr.Id">@usr.FirstName @usr.LastName</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group">
                        <label>Profile Name</label>
                        <InputSelect @bind-Value="userProfile.ProfileId" class="form-control">
                            <option value="0">Select Profile</option>
                            @foreach (var pr in profiles)
                            {
                                <option value="@pr.Id">@pr.Name</option>
                            }
                        </InputSelect>
                    </div>



                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"> <i class="lni lni-close"></i>Close</button>
                    <button type="submit" class="btn btn-primary"><i class="lni lni-save"></i>Save</button>
                </div>
            </EditForm>

        </div>
    </div>
</div>







@code
{
    //our code
    string modalTitle = "Add User Profile";
    bool isEditing = false;
    string pageUrl = "userProfiles";
    Module parentPage = new Module();
    Module thisPage = new Module();

    UserProfile userProfile = new IMSClassLibrary.Models.UserProfile()
        {
            CreatedBy = " ",
            ModifiedBy = " ",
            Status = "active"

        };
    List<IMSClassLibrary.Models.UserProfile> uProfile = new List<UserProfile>();
    List<IMSClassLibrary.Models.Profile> profiles = new List<Profile>();
    List<IMSClassLibrary.Models.User> users = new List<User>();

    string loggedInEmail;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        uProfile = userProfileRepository.GetAll().Data;
        resetModel();

        string Remail = httpContextAccessor.HttpContext.Session.GetString("email");
        var result = userRepository.Get(Remail);

        if (result.IsSuccessful)
        {
            httpContextAccessor.HttpContext.Session.SetString("email", result.Data.Email);
            loggedInEmail = result.Data.Email;
            thisPage = moduleRepository.Get(pageUrl).Data;
            parentPage = moduleRepository.Get(thisPage.ParentId).Data;

              if (!authorisation.authorize(result.Data.Id, pageUrl))
            {
                UriHelper.NavigateTo("/");
            }
        }
        else
        {

        }
    }

    void saveModule()
    {
        var resultObject = isEditing ? userProfileRepository.Update(this.userProfile) : userProfileRepository.Add(this.userProfile);
        if (resultObject.IsSuccessful)
        {
            NotificationService.ShowSuccess(resultObject.Message);
        }
        else
        {
            NotificationService.ShowError(resultObject.Message);
        }
        isEditing = false;
        closeModal("addMenuModal");
        resetModel();
    }

    private void editUserProfile(UserProfile mn)
    {
        isEditing = true;
        this.modalTitle = "Edit User Profile";
        this.userProfile = mn;
        openModal("addMenuModal");

    }

    void deleteUserProfile(UserProfile up)
    {
        this.userProfile = up;
        openModal("deleteMenuModal");
    }

    void completeDelete()
    {
        var resultObject = userProfileRepository.Delete(this.userProfile);
        if (resultObject.IsSuccessful)
        {
            resetModel();
            closeModal("deleteMenuModal");
            NotificationService.ShowSuccess(resultObject.Message);
        }
        else
        {

            NotificationService.ShowError(resultObject.Message);
        }

    }

    void resetModel()
    {
        users = userRepository.GetAll().Data;
        profiles = profileRepository.GetAll().Data;
        this.uProfile = userProfileRepository.GetAll().Data;
        this.modalTitle = "Add User Profile";
        this.userProfile = new UserProfile()
            {
                CreatedBy = loggedInEmail,
                ModifiedBy = "pre",
                Status = "active"

            };
    }


    protected async Task openModal(string modalId)
    {
        await js.InvokeVoidAsync("openModal", modalId);
    }

    protected async Task closeModal(string modalId)
    {
        await js.InvokeVoidAsync("closeModal", modalId);
    }
}